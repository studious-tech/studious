-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.course_materials (
  id text NOT NULL,
  course_id text NOT NULL,
  name text NOT NULL,
  display_name text NOT NULL,
  description text,
  file_media_id text NOT NULL,
  file_type text,
  file_size integer,
  sort_order integer DEFAULT 0,
  is_active boolean DEFAULT true,
  created_by uuid,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT course_materials_pkey PRIMARY KEY (id),
  CONSTRAINT course_materials_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id),
  CONSTRAINT course_materials_file_media_id_fkey FOREIGN KEY (file_media_id) REFERENCES public.media(id),
  CONSTRAINT course_materials_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.course_modules (
  id text NOT NULL,
  course_id text NOT NULL,
  name text NOT NULL,
  display_name text NOT NULL,
  description text,
  duration_minutes integer,
  sort_order integer DEFAULT 0,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT course_modules_pkey PRIMARY KEY (id),
  CONSTRAINT course_modules_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id)
);
CREATE TABLE public.course_videos (
  id text NOT NULL,
  module_id text NOT NULL,
  name text NOT NULL,
  display_name text NOT NULL,
  description text,
  video_type text NOT NULL DEFAULT 'upload'::text,
  video_url text,
  video_media_id text,
  thumbnail_media_id text,
  duration_seconds integer,
  sort_order integer DEFAULT 0,
  is_active boolean DEFAULT true,
  created_by uuid,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT course_videos_pkey PRIMARY KEY (id),
  CONSTRAINT course_videos_module_id_fkey FOREIGN KEY (module_id) REFERENCES public.course_modules(id),
  CONSTRAINT course_videos_video_media_id_fkey FOREIGN KEY (video_media_id) REFERENCES public.media(id),
  CONSTRAINT course_videos_thumbnail_media_id_fkey FOREIGN KEY (thumbnail_media_id) REFERENCES public.media(id),
  CONSTRAINT course_videos_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.courses (
  id text NOT NULL,
  exam_id text NOT NULL,
  name text NOT NULL,
  display_name text NOT NULL,
  description text,
  thumbnail_media_id text,
  difficulty_level integer DEFAULT 1 CHECK (difficulty_level >= 1 AND difficulty_level <= 5),
  duration_minutes integer,
  is_active boolean DEFAULT true,
  is_premium boolean DEFAULT false,
  sort_order integer DEFAULT 0,
  created_by uuid,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT courses_pkey PRIMARY KEY (id),
  CONSTRAINT courses_exam_id_fkey FOREIGN KEY (exam_id) REFERENCES public.exams(id),
  CONSTRAINT courses_thumbnail_media_id_fkey FOREIGN KEY (thumbnail_media_id) REFERENCES public.media(id),
  CONSTRAINT courses_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.exams (
  id text NOT NULL,
  name text NOT NULL,
  display_name text NOT NULL,
  description text,
  duration_minutes integer,
  total_score integer DEFAULT 90,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT exams_pkey PRIMARY KEY (id)
);
CREATE TABLE public.media (
  id text NOT NULL,
  original_filename text,
  file_type text NOT NULL,
  mime_type text,
  file_size integer,
  storage_path text NOT NULL,
  storage_bucket text DEFAULT 'exam-media'::text,
  public_url text,
  duration_seconds integer,
  dimensions jsonb,
  alt_text text,
  created_by uuid,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT media_pkey PRIMARY KEY (id),
  CONSTRAINT media_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.question_attempts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  question_id text,
  response_text text,
  response_media_id text,
  selected_options ARRAY,
  response_data jsonb,
  started_at timestamp without time zone DEFAULT now(),
  submitted_at timestamp without time zone,
  time_spent_seconds integer,
  ai_score numeric,
  manual_score numeric,
  final_score numeric,
  scoring_status text DEFAULT 'pending'::text,
  ai_feedback text,
  ai_analysis jsonb,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  test_session_id uuid,
  session_question_id uuid,
  CONSTRAINT question_attempts_pkey PRIMARY KEY (id),
  CONSTRAINT question_attempts_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT question_attempts_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id),
  CONSTRAINT question_attempts_response_media_id_fkey FOREIGN KEY (response_media_id) REFERENCES public.media(id),
  CONSTRAINT question_attempts_test_session_id_fkey FOREIGN KEY (test_session_id) REFERENCES public.test_sessions(id),
  CONSTRAINT question_attempts_session_question_id_fkey FOREIGN KEY (session_question_id) REFERENCES public.test_session_questions(id)
);
CREATE TABLE public.question_media (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  question_id text,
  media_id text,
  media_role text NOT NULL,
  display_order integer DEFAULT 0,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT question_media_pkey PRIMARY KEY (id),
  CONSTRAINT question_media_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id),
  CONSTRAINT question_media_media_id_fkey FOREIGN KEY (media_id) REFERENCES public.media(id)
);
CREATE TABLE public.question_options (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  question_id text,
  option_text text,
  option_media_id text,
  is_correct boolean DEFAULT false,
  display_order integer NOT NULL,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT question_options_pkey PRIMARY KEY (id),
  CONSTRAINT question_options_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id),
  CONSTRAINT question_options_option_media_id_fkey FOREIGN KEY (option_media_id) REFERENCES public.media(id)
);
CREATE TABLE public.question_types (
  id text NOT NULL,
  section_id text,
  name text NOT NULL,
  display_name text NOT NULL,
  description text,
  input_type text NOT NULL,
  response_type text NOT NULL,
  scoring_method text NOT NULL,
  time_limit_seconds integer,
  order_index integer NOT NULL,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  ui_component text,
  CONSTRAINT question_types_pkey PRIMARY KEY (id),
  CONSTRAINT question_types_section_id_fkey FOREIGN KEY (section_id) REFERENCES public.sections(id)
);
CREATE TABLE public.questions (
  id text NOT NULL,
  question_type_id text,
  title text,
  content text,
  instructions text,
  difficulty_level integer DEFAULT 3 CHECK (difficulty_level >= 1 AND difficulty_level <= 5),
  expected_duration_seconds integer,
  correct_answer jsonb,
  sample_answer text,
  tags ARRAY,
  is_active boolean DEFAULT true,
  created_by uuid,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  blanks_config jsonb,
  CONSTRAINT questions_pkey PRIMARY KEY (id),
  CONSTRAINT questions_question_type_id_fkey FOREIGN KEY (question_type_id) REFERENCES public.question_types(id),
  CONSTRAINT questions_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.sections (
  id text NOT NULL,
  exam_id text,
  name text NOT NULL,
  display_name text NOT NULL,
  description text,
  duration_minutes integer,
  order_index integer NOT NULL,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT sections_pkey PRIMARY KEY (id),
  CONSTRAINT sections_exam_id_fkey FOREIGN KEY (exam_id) REFERENCES public.exams(id)
);
CREATE TABLE public.subscription_payments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  subscription_id uuid NOT NULL,
  payment_provider text NOT NULL,
  payment_external_id text NOT NULL,
  amount numeric NOT NULL,
  currency text NOT NULL DEFAULT 'USD'::text,
  payment_status text NOT NULL DEFAULT 'pending'::text,
  payment_method text,
  paid_at timestamp without time zone,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT subscription_payments_pkey PRIMARY KEY (id),
  CONSTRAINT subscription_payments_subscription_id_fkey FOREIGN KEY (subscription_id) REFERENCES public.user_subscriptions(id)
);
CREATE TABLE public.subscription_plans (
  id text NOT NULL,
  name text NOT NULL,
  display_name text NOT NULL,
  description text,
  exam_id text,
  price_monthly numeric,
  price_yearly numeric,
  currency text DEFAULT 'USD'::text,
  mock_tests_limit integer,
  practice_questions_limit integer,
  ai_feedback_enabled boolean DEFAULT true,
  manual_review_enabled boolean DEFAULT false,
  trial_days integer DEFAULT 0,
  is_active boolean DEFAULT true,
  sort_order integer DEFAULT 0,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT subscription_plans_pkey PRIMARY KEY (id),
  CONSTRAINT subscription_plans_exam_id_fkey FOREIGN KEY (exam_id) REFERENCES public.exams(id)
);
CREATE TABLE public.test_session_questions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  session_id uuid,
  question_id text,
  sequence_number integer NOT NULL,
  allocated_time_seconds integer,
  is_attempted boolean DEFAULT false,
  is_completed boolean DEFAULT false,
  time_spent_seconds integer DEFAULT 0,
  question_attempt_id uuid,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT test_session_questions_pkey PRIMARY KEY (id),
  CONSTRAINT test_session_questions_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.test_sessions(id),
  CONSTRAINT test_session_questions_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id),
  CONSTRAINT test_session_questions_question_attempt_id_fkey FOREIGN KEY (question_attempt_id) REFERENCES public.question_attempts(id)
);
CREATE TABLE public.test_session_templates (
  id text NOT NULL,
  exam_id text,
  name text NOT NULL,
  description text,
  is_public boolean DEFAULT true,
  template_config jsonb NOT NULL,
  created_at timestamp without time zone DEFAULT now(),
  CONSTRAINT test_session_templates_pkey PRIMARY KEY (id),
  CONSTRAINT test_session_templates_exam_id_fkey FOREIGN KEY (exam_id) REFERENCES public.exams(id)
);
CREATE TABLE public.test_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  exam_id text,
  session_name text,
  session_type text NOT NULL DEFAULT 'practice'::text,
  is_timed boolean DEFAULT true,
  total_duration_minutes integer,
  question_count integer NOT NULL,
  difficulty_levels ARRAY DEFAULT ARRAY[1, 2, 3, 4, 5],
  question_selection_mode text NOT NULL DEFAULT 'mixed'::text,
  include_sections ARRAY,
  include_question_types ARRAY,
  session_config jsonb DEFAULT '{}'::jsonb,
  status text DEFAULT 'draft'::text,
  started_at timestamp without time zone,
  completed_at timestamp without time zone,
  total_time_spent_seconds integer DEFAULT 0,
  total_score numeric,
  max_possible_score numeric,
  percentage_score numeric,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT test_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT test_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT test_sessions_exam_id_fkey FOREIGN KEY (exam_id) REFERENCES public.exams(id)
);
CREATE TABLE public.user_achievements (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  achievement_type text NOT NULL,
  achievement_data jsonb,
  earned_at timestamp without time zone DEFAULT now(),
  CONSTRAINT user_achievements_pkey PRIMARY KEY (id),
  CONSTRAINT user_achievements_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_course_access (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  course_id text NOT NULL,
  access_type text NOT NULL DEFAULT 'enrolled'::text,
  granted_at timestamp without time zone DEFAULT now(),
  expires_at timestamp without time zone,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT user_course_access_pkey PRIMARY KEY (id),
  CONSTRAINT user_course_access_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_course_access_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id)
);
CREATE TABLE public.user_profiles (
  id uuid NOT NULL,
  full_name text,
  email text,
  avatar_url text,
  target_exam text,
  target_score numeric,
  role text DEFAULT 'student'::text,
  preferences jsonb DEFAULT '{}'::jsonb,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT user_profiles_pkey PRIMARY KEY (id),
  CONSTRAINT user_profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_progress (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  exam_id text,
  section_id text,
  question_type_id text,
  questions_attempted integer DEFAULT 0,
  questions_correct integer DEFAULT 0,
  average_score numeric,
  best_score numeric,
  total_time_spent_minutes integer DEFAULT 0,
  current_streak_days integer DEFAULT 0,
  longest_streak_days integer DEFAULT 0,
  last_activity_at timestamp without time zone DEFAULT now(),
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT user_progress_pkey PRIMARY KEY (id),
  CONSTRAINT user_progress_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_progress_exam_id_fkey FOREIGN KEY (exam_id) REFERENCES public.exams(id),
  CONSTRAINT user_progress_section_id_fkey FOREIGN KEY (section_id) REFERENCES public.sections(id),
  CONSTRAINT user_progress_question_type_id_fkey FOREIGN KEY (question_type_id) REFERENCES public.question_types(id)
);
CREATE TABLE public.user_subscriptions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  plan_id text,
  started_at timestamp without time zone DEFAULT now(),
  expires_at timestamp without time zone NOT NULL,
  is_trial boolean DEFAULT false,
  status text DEFAULT 'active'::text,
  mock_tests_used integer DEFAULT 0,
  practice_questions_used integer DEFAULT 0,
  payment_provider text,
  subscription_external_id text,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  billing_period text CHECK (billing_period = ANY (ARRAY['monthly'::text, 'yearly'::text])),
  auto_renew boolean DEFAULT true,
  canceled_at timestamp without time zone,
  CONSTRAINT user_subscriptions_pkey PRIMARY KEY (id),
  CONSTRAINT user_subscriptions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_subscriptions_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES public.subscription_plans(id)
);